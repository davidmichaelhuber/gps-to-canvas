(function() {    tinymce.create('tinymce.plugins.gpstocanvas', {        /**         * Initializes the plugin, this will be executed after the plugin has been created.         * This call is done before the editor instance has finished it's initialization so use the onInit event         * of the editor instance to intercept that event.         *         * @param {tinymce.Editor} ed Editor instance that the plugin is initialized in.         * @param {string} url Absolute URL to where the plugin is located.         */        init: function(ed, url) {            // Initialize own TinyMCE button.            ed.addButton('gpstocanvas', {                title: 'GPS To Canvas',                cmd: 'gpstocanvas',                image: url + '/../images/gpstocanvasIcon.png'            });                        // When this button gets clicked the function gets called.            ed.addCommand('gpstocanvas', function() {                // Opens the iFrame.                tb_show('', 'media-upload.php?type=image&amp;TB_iframe=true');                // When the iFrame is loaded.                jQuery('iframe#TB_iframeContent').load(function() {                    iFrameRestyle();                    function getFileUrl() {                        var fileUrl = jQuery("#TB_iframeContent").contents().find("#media-items").find(".urlfile").attr("data-link-url");                        console.log("File URL: " + fileUrl);                        if (fileUrl) {                            insertShortcode(fileUrl);                        }                        else {                            setTimeout(getFileUrl, 200);                        }                    }                    function insertShortcode(path) {                        // The shortcode gets inserted with the path of the uploaded track.                        shortcode = '[gpstocanvas path="' + path + '"]';                        ed.execCommand('mceInsertContent', 0, shortcode);                                                // When everything is done the iFrame gets faded out.                        jQuery('#TB_window').fadeOut();                        jQuery('#TB_overlay').fadeOut();                        setTimeout(function() {                            jQuery('#TB_window').remove(), jQuery('#TB_overlay').remove()                        }, 1000);                    }                    function fileDropped() {                        // #DEBUG                        console.log("Dropped something");                        var path = getFileUrl();                    }                                        // Restyle the iFrame of the wordpress media uploader.                    function iFrameRestyle() {                        // #DEBUG                        console.log("Start iFrame restyling");                        window.onresize = function() {                            document.getElementById("TB_iframeContent").contentDocument.getElementById("drag-drop-area").style.width = document.getElementById("TB_window").style.width;                            document.getElementById("TB_iframeContent").contentDocument.getElementById("drag-drop-area").style.height = document.getElementById("TB_window").style.height;                        };                        document.getElementById("TB_window").style.maxHeight = "400px";                        document.getElementById("TB_iframeContent").style.maxHeight = "400px";                        document.getElementById("TB_iframeContent").style.minHeight = "400px";                        document.getElementById("TB_iframeContent").contentDocument.getElementById("media-upload").style.maxHeight = "400px";                        document.getElementById("TB_iframeContent").contentDocument.getElementById("plupload-upload-ui").style.maxHeight = "400px";                        document.getElementById("TB_iframeContent").contentDocument.getElementById("drag-drop-area").style.maxHeight = "400px";                                                document.getElementById("TB_title").style.display = "none";                        document.getElementById("TB_iframeContent").contentDocument.getElementById("media-upload-header").style.display = "none";                        document.getElementById("TB_iframeContent").contentDocument.getElementsByClassName("media-title")[0].style.display = "none";                        document.getElementById("TB_iframeContent").contentDocument.getElementsByClassName("upload-flash-bypass")[0].style.display = "none";                        document.getElementById("TB_iframeContent").contentDocument.getElementsByClassName("max-upload-size")[0].style.display = "none";                        document.getElementById("TB_iframeContent").contentDocument.getElementsByClassName("drag-drop-inside")[0].style.display = "none";                        document.getElementById("TB_iframeContent").contentDocument.getElementById("media-items").style.display = "none";                        var saveButton = document.getElementById("TB_iframeContent").contentDocument.getElementsByClassName("savebutton ml-submit")[0];                        //jQuery(saveButton).remove();                        document.getElementById("TB_iframeContent").contentDocument.getElementsByTagName("html")[0].style.backgroundColor = "#00ffde";                        document.getElementById("TB_iframeContent").contentDocument.getElementById("media-upload").style.backgroundColor = "#00ffde";                        document.getElementById("TB_iframeContent").contentDocument.getElementById("media-upload").style.overflow = "hidden";                        document.getElementById("TB_window").style.border = "none";                        document.getElementById("TB_iframeContent").contentDocument.getElementById("drag-drop-area").style.border = "none";                        document.getElementById("TB_iframeContent").contentDocument.getElementById("image-form").style.margin = "0px";                                                var windowWidth = document.getElementById("TB_window").style.width;                        var windowHeight = document.getElementById("TB_window").style.height;                        document.getElementById("TB_iframeContent").contentDocument.getElementById("drag-drop-area").style.width = windowWidth;                        document.getElementById("TB_iframeContent").contentDocument.getElementById("drag-drop-area").style.height = windowHeight;                        var uploadField = document.getElementById("TB_iframeContent").contentDocument.getElementById("drag-drop-area");                        var infoDiv = document.createElement("div");                        infoDiv.setAttribute("id", "infoDiv");                        infoDiv.style.margin = "auto";                        infoDiv.style.width = "200px";                        infoDiv.style.height = "200px";                        infoDiv.style.marginTop = "95px";                        var infoImg = document.createElement("img");                        infoImg.setAttribute("src", url + "/../images/infoImgGPS.png");                        infoDiv.appendChild(infoImg);                        uploadField.appendChild(infoDiv);                        var countUp = true;                        divBounce();                        // #DEBUG                        console.log("Finished iFrame restyling");                        // #DEBUG                        console.log("Adding drop listener");                        // When a file gets dropped over the iFrame "fileDropped" gets called.                        var dragDropDiv = window.frames['TB_iframeContent'].contentDocument.getElementById("drag-drop-area");                        dragDropDiv.addEventListener("drop", fileDropped, false);                        // Animates the information div.                        function divBounce() {                            setTimeout(function() {                                infoDivMargin = infoDiv.style.marginTop;                                infoDivMargin = infoDivMargin.replace(/\D/g, '');                                if (infoDivMargin == 95) {                                    countUp = true;                                }                                else if (infoDivMargin == 105) {                                    countUp = false;                                }                                if (countUp == true) {                                    infoDivMargin++;                                    infoDiv.style.marginTop = infoDivMargin + "px";                                }                                else if (countUp == false) {                                    infoDivMargin--;                                    infoDiv.style.marginTop = infoDivMargin + "px";                                }                                divBounce();                            }, 50);                        }                    }                });            });        },        /**         * Creates control instances based in the incomming name. This method is normally not         * needed since the addButton method of the tinymce.Editor class is a more easy way of adding buttons         * but you sometimes need to create more complex controls like listboxes, split buttons etc then this         * method can be used to create those.         *         * @param {String} n Name of the control to create.         * @param {tinymce.ControlManager} cm Control manager to use inorder to create new control.         * @return {tinymce.ui.Control} New control instance or null if no control was created.         */        createControl: function(n, cm) {            return null;        },        /**         * Returns information about the plugin as a name/value array.         * The current keys are longname, author, authorurl, infourl and version.         *         * @return {Object} Name/value array containing information about the plugin.         */        getInfo: function() {            return {                longname: 'GPS To Canvas',                author: '',                authorurl: '',                infourl: '',                version: ""            };        }    });    // Register plugin    tinymce.PluginManager.add('gpstocanvas', tinymce.plugins.gpstocanvas);})();